name: Deploy to IPFS + Update Cloudflare DNSLink

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout site files
        uses: actions/checkout@v3

      - name: Upload to Storacha (IPFS)
        uses: storacha/add-to-web3@v3
        id: ipfs_upload
        with:
          path_to_add: './  '
          secret_key: ${{ secrets.W3_PRINCIPAL }}
          proof: ${{ secrets.W3_PROOF }}

      - name: Get Cloudflare IPFS Record ID
        id: get_dnslink_record_id
        run: |
          RESPONSE=$(curl -s -X GET \
          "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records?type=TXT&name=${{ secrets.CLOUDFLARE_IPFS_RECORD }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json")

          echo "$RESPONSE" | jq .
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Cloudflare record lookup failed!"
            exit 1
          else
            echo "✅ Cloudflare Record lookup succeeded!"
          fi

          RECORD_ID=$(echo "$RESPONSE" | jq -r '.result[0].id')
          echo "record_id=$RECORD_ID" >> $GITHUB_OUTPUT

      - name: Update Cloudflare IPFS Record
        run: |
          RESPONSE=$(curl -X PUT \
          "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ steps.get_dnslink_record_id.outputs.record_id }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "type": "TXT",
            "name": "${{ secrets.CLOUDFLARE_IPFS_RECORD }}",
            "content": "\"dnslink=/ipfs/${{ steps.ipfs_upload.outputs.cid }}\"",
            "ttl": 120
          }')

          echo "$RESPONSE" | jq .
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Cloudflare DNS update failed!"
            exit 1
          else
            echo "✅ Cloudflare DNS update succeeded!"
          fi

      - name: Get Cloudflare IPFS WWW Record ID
        id: get_dnslink_www_record_id
        run: |
          RESPONSE=$(curl -s -X GET \
          "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records?type=TXT&name=${{ secrets.CLOUDFLARE_IPFS_WWW_RECORD }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json")

          echo "$RESPONSE" | jq .
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Cloudflare record lookup failed!"
            exit 1
          else
            echo "✅ Cloudflare Record lookup succeeded!"
          fi

          RECORD_ID=$(echo "$RESPONSE" | jq -r '.result[0].id')
          echo "record_id=$RECORD_ID" >> $GITHUB_OUTPUT

      - name: Update Cloudflare IPFS WWW Record
        run: |
          RESPONSE=$(curl -X PUT \
          "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ steps.get_dnslink_www_record_id.outputs.record_id }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "type": "TXT",
            "name": "${{ secrets.CLOUDFLARE_IPFS_WWW_RECORD }}",
            "content": "\"dnslink=/ipfs/${{ steps.ipfs_upload.outputs.cid }}\"",
            "ttl": 120
          }')

          echo "$RESPONSE" | jq .
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')

          if [ "$SUCCESS" != "true" ]; then
            echo "❌ Cloudflare DNS update failed!"
            exit 1
          else
            echo "✅ Cloudflare DNS update succeeded!"
          fi

